"""
Django settings for sso project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import ldap
from django_auth_ldap.config import LDAPSearch, PosixGroupType, LDAPSearchUnion, GroupOfNamesType, ActiveDirectoryGroupType

# Generating django environment
import environ

env = environ.Env()

# reading .env file
environ.Env.read_env()

MAIN_DOMAIN = env('MAIN_DOMAIN')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG") == "True"

ALLOWED_HOSTS = env('HOST').split(';')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 3rd parties apps
    'corsheaders',
    'rest_framework',
    'sslserver',
    'oauth2_provider',
    'imagekit',

    # Internal apps
    'sso.api.account',
    'sso.api.res',
    'sso.auths',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    
    # CORS Middleware
    'corsheaders.middleware.CorsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



# CORS Header Setting
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = 'sso.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "sso/resources/templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sso.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env("DB_NAME"),
        'USER': env("DB_USER"),
        'PASSWORD': env("DB_PASS"),
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'id'

from django.utils.translation import gettext_lazy as _

TIME_ZONE = 'Asia/Jakarta'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
# STATIC_ROOT  = os.path.join(BASE_DIR, 'sso', 'resources','static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'sso', 'resources','static'),
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'sso', 'resources', 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    "django_auth_ldap.backend.LDAPBackend",
    'oauth2_provider.backends.OAuth2Backend',
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO','https')

# SOCIAL CONFIGURATION

SOCIAL_AUTH_GOOGLE_KEY = env("GOOGLE_KEY")
SOCIAL_AUTH_GOOGLE_SECRET = env("GOOGLE_SECRET")

SOCIAL_AUTH_FACEBOOK_KEY = env("FACEBOOK_KEY")
SOCIAL_AUTH_FACEBOOK_SECRET = env("FACEBOOK_SECRET")

SOCIAL_AUTH_TWITTER_KEY = env("TWITTER_KEY")
SOCIAL_AUTH_TWITTER_SECRET = env("TWITTER_SECRET")



# LDAP Configuration

DOMAIN_NAME = ",".join(list(map(lambda r: "dc=" + r, str(MAIN_DOMAIN).split("."))))
AUTH_LDAP_SERVER_URI = "ldap://localhost"
AUTH_USER_MODEL = 'account.User'

AUTH_LDAP_BIND_DN = "cn=Manager," + DOMAIN_NAME
AUTH_LDAP_PASSWORD = env("LDAP_PASSWORD")
LDAP_BASEDN = 'o=domains,' + DOMAIN_NAME 

AUTH_LDAP_USER_DN_TEMPLATE = "mail=%(user)s,ou=Users,domainName=" + MAIN_DOMAIN + "," + LDAP_BASEDN

AUTH_LDAP_USER_ATTR_MAP = {
    "username": "sn",
    "full_name": "cn",
    "email":"mail",
    "password":"userPassword",
    "user_type":"employeeType",
    "phone":"mobile",
    "eid":"employeeNumber",
    "permission_type":"domainGlobalAdmin",
    "_avatar":"jpegPhoto",
    "_is_active" : "accountStatus",
    }

# AUTH_LDAP_PROFILE_ATTR_MAP = {
#     "home_directory": "homeDirectory"
# }

AUTH_LDAP_ALWAYS_UPDATE_USER = True
AUTH_LDAP_CACHE_TIMEOUT = 3600
AUTH_LDAP_BIND_AS_AUTHENTICATING_USER = True

# AUTH_LDAP_FIND_GROUP_PERMS = True
# AUTH_LDAP_MIRROR_GROUPS = True

# AUTH_LDAP_GROUP_TYPE = ActiveDirectoryGroupType()
# AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr ="cn")
# AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()
# AUTH_LDAP_GROUP_SEARCH =


# OAUTH
PKCE_REQUIRED = False
AUTHORIZATION_CODE_EXPIRE_SECONDS = 600
LOGIN_URL = "/login/?state=alert_must_login"

os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'